import { useEffect, useState, useMemo } from 'react';
import Head from 'next/head';
import {
  Flex,
  Box,
  FormControl,
  FormLabel,
  Input,
  Stack,
  Link,
  Button,
  Heading,
  Text,
  List,
  ListItem,
  UnorderedList,
  useColorModeValue,
} from '@chakra-ui/react';
import { useForm } from 'react-hook-form';
import { useRouter } from 'next/router';
import { ExternalLinkIcon } from '@chakra-ui/icons';
import { RangeDatepicker } from 'chakra-dayzed-datepicker';
import { formatDate, getDefaultDates } from '@/utils/date';
import { fetchGitHubData } from '@/utils/fetchGitHubData';
import { formatGitHubData } from '@/utils/formatGitHubData';
import { Contributions } from '@/utils/fetchGitHubData';

export default function Home() {
  const {
    query: { pat, username, start, end },
  } = useRouter();
  const startDate = useMemo(
    () => (typeof start === 'string' ? new Date(start) : undefined),
    [start],
  );
  const endDate = useMemo(
    () => (typeof end === 'string' ? new Date(end) : undefined),
    [end],
  );
  const [selectedDates, setSelectedDates] = useState<Date[]>(
    getDefaultDates(startDate, endDate),
  );
  const formattedStartDate = selectedDates[0]
    ? formatDate(selectedDates[0])
    : '';
  const formattedEndDate = selectedDates[1] ? formatDate(selectedDates[1]) : '';
  const [loading, setLoading] = useState(false);
  const [{ myPullRequests, myComments }, setGithubData] = useState<{
    myPullRequests: Contributions;
    myComments: Contributions;
  }>({
    myPullRequests: [],
    myComments: [],
  });
  const [seeMore, setSeeMore] = useState<{
    myPullRequests: boolean;
    myComments: boolean;
  }>({
    myPullRequests: false,
    myComments: false,
  });
  const gray = useColorModeValue('gray.50', 'gray.800');
  const white = useColorModeValue('white', 'gray.700');
  const { handleSubmit, register, setValue } = useForm({
    defaultValues: { pat, username },
  });
  const onSubmit = handleSubmit(async ({ pat, username }) => {
    setLoading(true);
    const githubData = await fetchGitHubData({
      pat: pat as string,
      username: username as string,
      startDate: formattedStartDate,
      endDate: formattedEndDate,
    });
    setLoading(false);
    const formattedGithubData = formatGitHubData(githubData, username);
    setGithubData(formattedGithubData);
  });

  useEffect(() => {
    if (pat) {
      setValue('pat', pat);
    }
    if (username) {
      setValue('username', username);
    }
  }, [pat, username, setValue]);

  useEffect(() => {
    setSelectedDates(getDefaultDates(startDate, endDate));
  }, [startDate, endDate]);

  return (
    <>
      <Head>
        <title>GitHub Contribution</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        minH={'100vh'}
        align={'center'}
        justify={'center'}
        bg={gray}
        flexDirection={'column'}
        p={8}
      >
        <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>
          <Stack align={'center'}>
            <Heading fontSize={'4xl'}>GitHub Contribution</Heading>
            {!myPullRequests.length && !myComments.length ? (
              <>
                <Text fontSize={'lg'} color={'gray.600'}>
                  How to create GitHub personal access token?
                  <Link
                    ml="2"
                    color={'blue.400'}
                    href="https://docs.github.com/en/enterprise-server@3.4/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
                    isExternal
                  >
                    <ExternalLinkIcon ml="2px" />
                  </Link>
                </Text>
                <Text className="markdown-body" mt={'4'}>
                  This site can auto-fill the form depending on the query
                  parameter. <code>username</code>, <code>pat</code>,{' '}
                  <code>start(yyyy-MM-dd)</code>, <code>end(yyyy-MM-dd)</code>
                </Text>
              </>
            ) : (
              <Button
                bg={'blue.400'}
                color={'white'}
                _hover={{
                  bg: 'blue.500',
                }}
                onClick={() => {
                  window.location.reload();
                }}
              >
                Re-Create GitHub Contribution
              </Button>
            )}
          </Stack>
          {!myPullRequests.length && !myComments.length && (
            <form onSubmit={onSubmit}>
              <Box rounded={'lg'} bg={white} boxShadow={'lg'} p={8}>
                <Stack spacing={4}>
                  <FormControl>
                    <FormLabel>GitHub user name</FormLabel>
                    <Input
                      id="username"
                      type="text"
                      defaultValue={username}
                      {...register('username')}
                    />
                  </FormControl>
                  <FormControl>
                    <FormLabel>GitHub personal access token</FormLabel>
                    <Input
                      id="pat"
                      type="password"
                      defaultValue={pat}
                      {...register('pat')}
                    />
                  </FormControl>
                  <FormControl>
                    <FormLabel>Period</FormLabel>
                    <RangeDatepicker
                      selectedDates={selectedDates}
                      onDateChange={setSelectedDates}
                      configs={{
                        dateFormat: 'yyyy-MM-dd',
                      }}
                    />
                  </FormControl>
                  <Stack spacing={10}>
                    <Button
                      bg={'blue.400'}
                      color={'white'}
                      _hover={{
                        bg: 'blue.500',
                      }}
                      isLoading={loading}
                      loadingText=""
                      type="submit"
                    >
                      Create GitHub Contribution
                    </Button>
                  </Stack>
                </Stack>
              </Box>
            </form>
          )}
        </Stack>
        {!!myPullRequests.length && (
          <Box rounded={'lg'} bg={white} boxShadow={'lg'} p={8} width={'100%'}>
            <Text>
              The period from{' '}
              <Text as="b" fontSize={'xl'}>
                {formattedStartDate}
              </Text>{' '}
              to{' '}
              <Text as="b" fontSize={'xl'}>
                {formattedEndDate}
              </Text>
              .
            </Text>
            <UnorderedList mt="4">
              <ListItem>
                The number of pull requests you created and merged is{' '}
                <Text as="b" fontSize={'xl'}>
                  {myPullRequests.length}
                </Text>
                .
              </ListItem>
              <ListItem mt="4">
                The number of times you commented on other people&apos;s PRs is{' '}
                <Text as="b" fontSize={'xl'}>
                  {myComments.length}
                </Text>
                .
              </ListItem>
            </UnorderedList>
            <Stack mt="4" spacing={4}>
              <Button
                onClick={() => {
                  setSeeMore((prevState) => ({
                    ...prevState,
                    myPullRequests: !prevState.myPullRequests,
                  }));
                }}
              >
                {seeMore.myPullRequests ? 'Close' : 'See'} all pull requests(
                {myPullRequests.length})
              </Button>
              {seeMore.myPullRequests && (
                <List>
                  {myPullRequests.map((item, index) => (
                    <ListItem
                      mt={index ? 4 : 0}
                      key={item.url}
                      className="comment-body markdown-body"
                    >
                      <Link href={item.url} target="_blank">
                        {item.bodyHTML}
                      </Link>
                    </ListItem>
                  ))}
                </List>
              )}
              <Button
                onClick={() => {
                  setSeeMore((prevState) => ({
                    ...prevState,
                    myComments: !prevState.myComments,
                  }));
                }}
              >
                {seeMore.myComments ? 'Close' : 'See'} all comments(
                {myComments.length})
              </Button>
              {seeMore.myComments && (
                <List>
                  {myComments.map((item, index) => (
                    <ListItem
                      p={'4'}
                      pb={0}
                      mt={index ? 4 : 0}
                      key={item.url}
                      className="comment-body markdown-body"
                      style={{
                        border: '1px #d0d7de solid',
                        borderRadius: '6px',
                        position: 'relative',
                      }}
                    >
                      <Text
                        dangerouslySetInnerHTML={{ __html: item.bodyHTML }}
                      />
                      <Link
                        href={item.url}
                        target="_blank"
                        style={{
                          position: 'absolute',
                          top: 0,
                          right: 0,
                          width: '40px',
                          height: '40px',
                          display: 'inline-flex',
                          justifyContent: 'center',
                          alignItems: 'center',
                        }}
                      >
                        <ExternalLinkIcon ml="2px" />
                      </Link>
                    </ListItem>
                  ))}
                </List>
              )}
            </Stack>
          </Box>
        )}
      </Flex>
    </>
  );
}
